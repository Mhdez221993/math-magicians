{"version":3,"sources":["components/Navbar.js","logic/operate.js","components/Buttons.js","components/Screen.js","components/Calculator.js","logic/calculate.js","pages/Calculate.js","pages/Home.js","pages/Quotes.js","App.js","index.js"],"names":["Navbar","className","id","path","text","map","link","to","activeClassName","exact","operate","numberOne","numberTwo","operation","one","Big","two","plus","toString","minus","times","div","mod","Error","MapButtons","props","keys","key","onClick","cb","handleClick","type","value","Buttons","Screen","Calculator","useState","state","newState","setItem","next","total","curr","event","obj","buttonName","target","match","includes","parseFloat","Calculate","Home","Quotes","App","basename","process","React","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c121e77d.chunk.js","sourcesContent":["import React from 'react';\nimport { NavLink } from 'react-router-dom';\n\nconst Navbar = () => {\n  const links = [\n    {\n      id: 1,\n      path: '/',\n      text: 'Math Magicians',\n    },\n    {\n      id: 2,\n      path: '/',\n      text: 'Home',\n    },\n    {\n      id: 3,\n      path: '/calculator',\n      text: 'Calculator',\n    },\n    {\n      id: 4,\n      path: '/quotes',\n      text: 'Quotes',\n    },\n  ];\n\n  return (\n    <nav className=\"navBar\">\n      <ul className=\"nav-list\">\n        {links.map(link => (\n          <li key={link.id} className=\"nav-links\">\n            <NavLink to={link.path} activeClassName=\"active-link\" exact>\n              {link.text}\n            </NavLink>\n          </li>\n        ))}\n      </ul>\n    </nav>\n  );\n};\n\nexport default Navbar;\n","import Big from 'big.js';\n\nexport default function operate(numberOne, numberTwo, operation) {\n  const one = Big(numberOne);\n  const two = Big(numberTwo);\n  if (operation === '+') {\n    return one.plus(two).toString();\n  }\n  if (operation === '-') {\n    return one.minus(two).toString();\n  }\n  if (operation === 'x') {\n    return one.times(two).toString();\n  }\n  if (operation === 'รท') {\n    return one.div(two).toString();\n  }\n  if (operation === '%') {\n    return one.mod(two).toString();\n  }\n  throw Error(`Unknown operation '${operation}'`);\n}\n","import React from 'react';\n\nconst Buttons = props => {\n  const button = ['AC', '+/-', '%', 'รท', '7', '8', '9', 'x', '4', '5', '6', '-', '1', '2', '3', '+', '0', '.', '='];\n  return (\n    <div className=\"buttons\">\n      <MapButtons keys={button} cb={props} />\n    </div>\n  );\n};\n\nconst MapButtons = props => props.keys.map(key => (\n  <div key={key.toString()} className=\"button\">\n    <button onClick={props.cb.handleClick} className=\"btn\" type=\"button\" value={key}>{key}</button>\n  </div>\n));\n\nexport default Buttons;\n","import PropTypes from 'prop-types';\nimport React from 'react';\n\nconst Screen = props => {\n  const {\n    value,\n  } = props;\n\n  return (\n    <div className=\"Display\">\n      <span className=\"Screen\">{value}</span>\n    </div>\n  );\n};\n\nScreen.propTypes = {\n  value: PropTypes.string.isRequired,\n};\n\nexport default Screen;\n","import React, { useState } from 'react';\nimport calculate from '../logic/calculate';\nimport Buttons from './Buttons';\nimport Screen from './Screen';\n\nconst Calculator = () => {\n  const [state, setItem] = useState(\n    (state, newState) => ({ ...state, ...newState }),\n    {},\n  );\n\n  const handleClick = event => {\n    setItem(calculate(state, event.target.value));\n  };\n\n  const {\n    next, total,\n  } = state;\n  const curr = next || total || '0';\n  return (\n    <div className=\"Calculator\">\n      <Screen value={curr} />\n      <Buttons handleClick={handleClick} />\n    </div>\n  );\n};\n\nexport default Calculator;\n","import operate from './operate';\n\nfunction isNumber(item) {\n  return !!item.match(/[0-9]+/);\n}\n\n/**\n * Given a button name and a calculator data object, return an updated\n * calculator data object.\n *\n * Calculator data object contains:\n *   total:s      the running total\n *   next:String       the next number to be operated on with the total\n *   operation:String  +, -, etc.\n */\nexport default function calculate(obj, buttonName) {\n  if (buttonName === 'AC') {\n    return {\n      total: null,\n      next: null,\n      operation: null,\n    };\n  }\n\n  if (isNumber(buttonName)) {\n    if (buttonName === '0' && obj.next === '0') {\n      return {};\n    }\n    // If there is an operation, update next\n    if (obj.operation) {\n      if (obj.next) {\n        return {\n          next: obj.next + buttonName,\n          total: obj.total,\n          operation: obj.operation,\n        };\n      }\n      return { next: buttonName, total: obj.total, operation: obj.operation };\n    }\n    // If there is no operation, update next and clear the value\n    if (obj.next) {\n      return {\n        next: obj.next + buttonName,\n        total: obj.total,\n        operation: obj.operation,\n      };\n    }\n    return {\n      next: buttonName,\n      total: null,\n    };\n  }\n\n  if (buttonName === '.') {\n    if (obj.next) {\n      if (obj.next.includes('.')) {\n        return {};\n      }\n      return { next: `${obj.next}.` };\n    }\n    if (obj.operation) {\n      return { next: '0.' };\n    }\n    if (obj.total) {\n      if (obj.total.includes('.')) {\n        return {};\n      }\n      return { total: `${obj.total}.` };\n    }\n    return { total: '0.' };\n  }\n\n  if (buttonName === '=') {\n    if (obj.next && obj.operation) {\n      return {\n        total: operate(obj.total, obj.next, obj.operation),\n        next: null,\n        operation: null,\n      };\n    }\n    // '=' with no operation, nothing to do\n    return {};\n  }\n\n  if (buttonName === '+/-') {\n    if (obj.next) {\n      return { next: (-1 * parseFloat(obj.next)).toString() };\n    }\n    if (obj.total) {\n      return { total: (-1 * parseFloat(obj.total)).toString() };\n    }\n    return {};\n  }\n\n  // Button must be an operation\n\n  // When the user presses an operation button without having entered\n  // a number first, do nothing.\n  if (!obj.next && !obj.total) {\n    return {};\n  }\n\n  // User pressed an operation button and there is an existing operation\n  if (obj.operation) {\n    return {\n      total: operate(obj.total, obj.next, obj.operation),\n      next: null,\n      operation: buttonName,\n    };\n  }\n\n  // no operation yet, but the user typed one\n\n  // The user hasn't typed a number yet, just save the operation\n  if (!obj.next) {\n    return { operation: buttonName };\n  }\n\n  // save the operation and shift 'next' into 'total'\n  return {\n    total: obj.next,\n    next: null,\n    operation: buttonName,\n  };\n}\n","import React from 'react';\nimport Calculator from '../components/Calculator';\n\nconst Calculate = () => (\n  <div className=\"calculator-wrapper\">\n    <div className=\"description\">\n      <h2>WHAT IS NEW</h2>\n      <p>\n        Calculator now displays decimal results and symbolic results for\n        fractions or certain advanced functions.\n        For example, 10 รท 12 will display both 0.83333....\n      </p>\n    </div>\n    <Calculator />\n  </div>\n);\n\nexport default Calculate;\n","import React from 'react';\n\nconst Home = () => (\n  <div className=\"description\">\n    <h2>Welcome to the Math Magicians App</h2>\n    <p>\n      Calculator provides simple and advanced mathematical functions in a beautifully designed app.\n      Perform basic calculations such as addition, subtraction, multiplication, and division\n      Do scientific operations such as trigonometric, logarithmic, and exponential functions\n    </p>\n  </div>\n);\nexport default Home;\n","import React from 'react';\n\nconst Quotes = () => (\n  <div className=\"description\">\n    <h2>Math Magicians</h2>\n    <p>\n      Mathematics includes the study of such topics as quantity, structure, space,\n      and change. It has no generally accepted definition.\n      Mathematicians seek and use patterns to formulate new conjectures;\n      they resolve the truth or falsity of such by mathematical proof.\n    </p>\n  </div>\n);\nexport default Quotes;\n","import React from 'react';\nimport { HashRouter as Router, Route, Switch } from 'react-router-dom';\nimport Navbar from './components/Navbar';\nimport Calculate from './pages/Calculate';\nimport Home from './pages/Home';\nimport Quotes from './pages/Quotes';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.props = props;\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Router basename={process.env.PUBLIC_URL}>\n          <Navbar />\n          <Switch>\n            <Route exact path=\"/\">\n              <Home />\n            </Route>\n            <Route path=\"/quotes\">\n              <Quotes />\n            </Route>\n            <Route path=\"/calculator\">\n              <Calculate />\n            </Route>\n          </Switch>\n        </Router>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './calculator.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}